package datagen

import (
	"math/rand"
	"sync/atomic"
)

// DataGen generates a single random name and path for a directory or file with random data
type DataGen struct {
	MinSizeInBytes int   // minimum file size in bytes
	MaxSizeInBytes int   // maximum file size in bytes
	bytesGenerated int64 // atomic counter for total bytes generated
}

// DefaultDataGen returns default configuration
func DefaultDataGen() *DataGen {
	return &DataGen{
		MinSizeInBytes: 1024,       // 1KB
		MaxSizeInBytes: 1024 * 100, // 100KB
	}
}

// GenerateRandomSize returns a random file size between min and max bytes
func (dg *DataGen) GenerateRandomSize() int {
	size := rand.Intn(dg.MaxSizeInBytes-dg.MinSizeInBytes+1) + dg.MinSizeInBytes
	atomic.AddInt64(&dg.bytesGenerated, int64(size))
	return size
}

// GetBytesGenerated returns the total number of bytes generated by this DataGen
func (dg *DataGen) GetBytesGenerated() int64 {
	return atomic.LoadInt64(&dg.bytesGenerated)
}

// ResetBytesGenerated resets the bytes generated counter to zero
func (dg *DataGen) ResetBytesGenerated() {
	atomic.StoreInt64(&dg.bytesGenerated, 0)
}
